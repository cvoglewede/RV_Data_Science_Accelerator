data("mtcars")
view(mtcars)
View("mtcars")
data(mtcars)
mtcars <- data(mtcars)
mtcars
mtcars
Mtcars
rm(mtcars)
mtcars
View(mtcars)
data(mtcars)
rm(mtcars)
mtcars <- mtcars
myName <- "Connor Voglewede"
mtcarsColumns <- c(mtcars[,])
mtcarsColumns
mtcarsColumns <- c(mtcars[0,])
mtcarsColumns
View(mtcarsColumns)
mtcarsColumns <- c(mtcars[1,])
mtcarsColumns
mtcarsColumns <- c(mtcars[0,])
mtcarsColumns
mtcarsColumns <- c(colnames(mtcars))
mtcarsColumns
mtcarsSummary <- summary(mtcars)
mtcarsSummary
dratValue <- mtcars$drat[mtcars$cyl==6]
dratValue
dratValue <- mtcars$drat[mtcars$cyl=6]
dratValue <- mtcars$drat[mtcars$cyl==6]
dratValue
View(mtcars)
dratValue <- mtcars$drat[mtcars$cyl==6 & mtcars$mpg>21]
dratValue
View(mtcars)
df <- sort(mtcars)
?sort
df <- sort(mtcars$qsec)
df
df <- mtcars[order(mtcars$qsec),]
df
df <- mtcars[order(-mtcars$qsec),]
df
df <- head(mtcars[order(-mtcars$qsec),],6)
df
topQsec <- head(mtcars[order(-mtcars$qsec),],6)
topQsec
rm(list())
rm(list=ls())
mtcars <- mtcars
myName <- "Connor Voglewede"
mtcarsColumns <- c(colnames(mtcars))
mtcarsSummary <- summary(mtcars)
dratValue <- mtcars$drat[mtcars$cyl==6 & mtcars$mpg>21]
topQsec <- head(mtcars[order(-mtcars$qsec),],6)
View(mtcars)
View(topQsec)
cd()
cd()
cd?
setwd?
?setwd
?setwd
getwd()
setwd( "/Users/cvoglewede/projects/DS_Accelerator")
getwd()
setwd( "/Users/cvoglewede/projects/DS_Accelerator/Week2")
getwd()
my_variable <- 10
my_varıable
my_varıable
variable <- 10
varıable
variable <- 10
varıable
variable <- 10
varıable
x <- 1
x
variable
variable <- 10
varıable
variable
variable <- 10
varıable
x <- 1
x
variable
variable <- 10
varıable
varıable
x <- 1
varıable
variable
x <- 1
x
variable
variable <- 11
variable
library(tidyverse)
installed.packages(tidyverse)
install.packages(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
y
yes
install.packages("tidyverse")
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
fliter(mpg, cyl = 8)
filter(diamond, carat > 3)
# fliter(mpg, cyl = 8)
filter(mpg, cyl = 8)
# fliter(mpg, cyl = 8)
filter(mpg, cyl = 8)
mpg
# fliter(mpg, cyl = 8)
filter(mpg, cyl = 8)
# fliter(mpg, cyl = 8)
filter(mpg, cyl == 8)
filter(diamond, carat > 3)
# filter(diamond, carat > 3)
filter(diamonds, carat > 3)
filter(flights, arr_delay >= 120)
flights
library(nycflights13)
install.packages("nycslights13")
library(nycflights13)
flights
library(nycflights13)
install.packages("nycslights13")
install.packages("nycflights13")
library(nycflights13)
#a
filter(flights, arr_delay >= 120)
#b
filter(flights, dest == "IAH" | dest == "HOU")
#b
x<-filter(flights, dest == "IAH" | dest == "HOU")
x
View(x)
View(x)
View(x)
#c
data("airlines")
#c
data(airlines)
#c
data(airlines)
#c
airlines <- data(airlines)
#c
airlines <- data("airlines")
#c
rm(airlines)
#c
airlines
#c
flights_carrier <- merge(flights,airlines,by="carrier",all.x=TRUE)
View(flights_carrier)
flights1 <-flights
View(flights_carrier)
test <- filter(flights_carrier,
carrier == "United Airlines Inc." |
carrier == "American Airlines Inc." |
carrier == "Delta Airlines Inc.")
View(flights_carrier)
test <- filter(flights_carrier,
name == "United Airlines Inc." |
name == "American Airlines Inc." |
name == "Delta Airlines Inc.")
View(test)
#c
test <- filter(flights,
carrier == "UA" |
carrier == "American Airlines Inc." |
carrier == "Delta Airlines Inc.")
View(test)
#c
test <- filter(flights,
carrier == "UA" |
carrier == "AA" |
carrier == "DL")
View(test)
#d
filter(flights, month in (7,8,9))
View(flights1)
#d
filter(flights, month %in% c(7,8,9))
#e
filter(flights, dep_delay <= 0, arr_delay > 120)
# between() is a helpful function to specify an inclusive range of values. The code for 1, part d could be simplified with the following:
filter(flights, between(month,7,9))
#d
filter(flights, month %in% c(7,8,9))
sum(is.na(flights$dep_time))
filter(flights,is.na(dep_time))
look_for_missing <- filter(flights,is.na(dep_time))
View(look_for_missing)
View(look_for_missing)
sapply(flights,function(x) sum(is.na(x)))
sapply(look_for_missing,function(x) sum(is.na(x)))
NA^0
NA | TRUE
FALSE & NA
NA
NA * 0
Inf*0
arrange(flights, desc(is.na(dep_time)), dep_time)
arrange(flights, desc(is.na(dep_time)))
arrange(flights, (is.na(dep_time)))
arrange(flights, desc(is.na(dep_time)))
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)
# Longest Flights
arrange(flights, desc(air_time))
# Shortest Flights
arrange(flights, air_time)
# Shortest Flights
x <- arrange(flights, air_time)
View(x)
select(flights, year, month, day, year, year)
select(flights, carrier, carrier, air_time, dep_delay)
# one_of() is a function that allows for a list of character strings to be references as a vector, instead of many separate character strings. For example, we can use the select() function with one_of() to return a data frame with column names that are a part of the vector vars.
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
select(flights, contains("TIME"))
## Connor Voglewede
## Week 2 R Homework
## 4.4 1-3 ,
## 5.2.4 1-4 ,
## 5.3.1 1-4 ,
## 5.4.1 2-4
## 4.4 1:
# The number 10 is assigned to to my_variable, spelled with an i.
# The next line, my_var1able is a typo, with a dotless 'i' or '1' where the dotted 'i' should be.
# This is why the code returns an error.
## 4.4 2:
install.packages("tidyverse")
library(tidyverse)
# library(tidyverse) must be prefaced with install.packages("tidyverse") for instances in which tidyverse is not pre-installed.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# This code works just fine for me and shows a scatterplot depicting the negative correlation between the variables hwy and displ.
# fliter(mpg, cyl = 8)
filter(mpg, cyl == 8)
# There are two errors that must be corrected. First, there is the typo on the function filter. Second, "==" needs to be used instead of "=".
# filter(diamond, carat > 3)
filter(diamonds, carat > 3)
# There is a typo on the dataset name. diamonds os the correct data frame.
## 4.4 3:
# A shortcut menu pops up when I press Alt + Shift + K.
# Through the menus, the keyboard shortcuts can be accesed through Tools -> Keyboard Shortcuts Help.
## 5.2.4 1:
install.packages("nycflights13")
library(nycflights13)
#a
filter(flights, arr_delay >= 120)
#b
filter(flights, dest == "IAH" | dest == "HOU")
#c
filter(flights,
carrier == "UA" |
carrier == "AA" |
carrier == "DL")
#d
filter(flights, month %in% c(7,8,9))
#e
filter(flights, dep_delay <= 0, arr_delay > 120)
#f
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
#g
filter(flights, dep_time <= 600 | dep_time == 2400)
## 5.2.4 2:
# between() is a helpful function to specify an inclusive range of values. The code for 1, part d could be simplified with the following:
filter(flights, between(month,7,9))
## 5.2.4 3:
sum(is.na(flights$dep_time))
# 8,255 flights have a missing departure time
look_for_missing <- filter(flights,is.na(dep_time))
sapply(look_for_missing,function(x) sum(is.na(x)))
# departure delay, arrival time, arrival delay, and air time are all missing values of every record where departure time is missing. These are probably cancelled flights.
## 5.2.4 4:
NA^0
NA | TRUE
FALSE & NA
NA * 0
# NA^0==1 because all numbers raised to the 0 power equals 1.
# NA | TRUE is TRUE because TRUE is TRUE and TRUE | x is going to be TRUE for any x
# FALSE & NA is FALSE because FALSE and anything will be FALSE
# If the NA matters, then the result will be 'NA'.
# In the NA * 0 example, it returns NA as the result even though you might think that x*0==0 for all x. However, that's not true if x=+/- infinity. In such a case, Inf*0 returns NaN. Thus the NA matters and NA*0 returns NA.
## 5.3.1 1:
# missing values first
arrange(flights, desc(is.na(dep_time)))
## 5.3.1 2:
# Most delayed flights
arrange(flights, desc(dep_delay))
# Smallest delay
arrange(flights, dep_delay)
## 5.3.1 3:
# Fastest Flights
arrange(flights, air_time)
## 5.3.1 4:
# Longest Flights
arrange(flights, desc(air_time))
# Shortest Flights
arrange(flights, air_time)
## 5.4.1 2:
select(flights, carrier, carrier, air_time, dep_delay)
# Duplicating variables doesn't not affect the output of the select function.
## 5.4.1 3:
# one_of() is a function that allows for a list of character strings to be references as a vector, instead of many separate character strings. For example, we can use the select() function with one_of() to return a data frame with column names that are a part of the vector vars.
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
## 5.4.1 4:
select(flights, contains("TIME"))
# This result is a bit surprising in the sense that case does seem to matter to the select() helper function.
# To change the default of ignoring case, you can add the argument ignore.case = FALSE in the contain function after "TIME".
select(flights, contains("TIME", ignore.case = FALSE))
install.packages("tidyverse")
install.packages("nycflights13")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# This code works just fine for me and shows a scatterplot depicting the negative correlation between the variables hwy and displ.
# fliter(mpg, cyl = 8)
filter(mpg, cyl == 8)
# There are two errors that must be corrected. First, there is the typo on the function filter. Second, "==" needs to be used instead of "=".
# filter(diamond, carat > 3)
filter(diamonds, carat > 3)
# There is a typo on the dataset name. diamonds os the correct data frame.
## 4.4 3:
# A shortcut menu pops up when I press Alt + Shift + K.
# Through the menus, the keyboard shortcuts can be accesed through Tools -> Keyboard Shortcuts Help.
## 5.2.4 1:
install.packages("nycflights13")
library(nycflights13)
#a
filter(flights, arr_delay >= 120)
#b
filter(flights, dest == "IAH" | dest == "HOU")
#c
filter(flights,
carrier == "UA" |
carrier == "AA" |
carrier == "DL")
#d
filter(flights, month %in% c(7,8,9))
#e
filter(flights, dep_delay <= 0, arr_delay > 120)
#f
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
#g
filter(flights, dep_time <= 600 | dep_time == 2400)
## 5.2.4 2:
# between() is a helpful function to specify an inclusive range of values. The code for 1, part d could be simplified with the following:
filter(flights, between(month,7,9))
## 5.2.4 3:
sum(is.na(flights$dep_time))
# 8,255 flights have a missing departure time
look_for_missing <- filter(flights,is.na(dep_time))
sapply(look_for_missing,function(x) sum(is.na(x)))
# departure delay, arrival time, arrival delay, and air time are all missing values of every record where departure time is missing. These are probably cancelled flights.
## 5.2.4 4:
NA^0
NA | TRUE
FALSE & NA
NA * 0
# NA^0==1 because all numbers raised to the 0 power equals 1.
# NA | TRUE is TRUE because TRUE is TRUE and TRUE | x is going to be TRUE for any x
# FALSE & NA is FALSE because FALSE and anything will be FALSE
# If the NA matters, then the result will be 'NA'.
# In the NA * 0 example, it returns NA as the result even though you might think that x*0==0 for all x. However, that's not true if x=+/- infinity. In such a case, Inf*0 returns NaN. Thus the NA matters and NA*0 returns NA.
## 5.3.1 1:
# missing values first
arrange(flights, desc(is.na(dep_time)))
## 5.3.1 2:
# Most delayed flights
arrange(flights, desc(dep_delay))
# Smallest delay
arrange(flights, dep_delay)
## 5.3.1 3:
# Fastest Flights
arrange(flights, air_time)
## 5.3.1 4:
# Longest Flights
arrange(flights, desc(air_time))
# Shortest Flights
arrange(flights, air_time)
## 5.4.1 2:
select(flights, carrier, carrier, air_time, dep_delay)
# Duplicating variables doesn't not affect the output of the select function.
## 5.4.1 3:
# one_of() is a function that allows for a list of character strings to be references as a vector, instead of many separate character strings. For example, we can use the select() function with one_of() to return a data frame with column names that are a part of the vector vars.
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
## 5.4.1 4:
select(flights, contains("TIME"))
# This result is a bit surprising in the sense that case does seem to matter to the select() helper function.
# To change the default of ignoring case, you can add the argument ignore.case = FALSE in the contain function after "TIME".
select(flights, contains("TIME", ignore.case = FALSE))
install.packages("nycflights13")
filter(flights, arr_delay >= 120)
#b
filter(flights, dest == "IAH" | dest == "HOU")
#c
filter(flights,
carrier == "UA" |
carrier == "AA" |
carrier == "DL")
#d
filter(flights, month %in% c(7,8,9))
#e
filter(flights, dep_delay <= 0, arr_delay > 120)
#f
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
#g
filter(flights, dep_time <= 600 | dep_time == 2400)
## 5.2.4 2:
# between() is a helpful function to specify an inclusive range of values. The code for 1, part d could be simplified with the following:
filter(flights, between(month,7,9))
## 5.2.4 3:
sum(is.na(flights$dep_time))
# 8,255 flights have a missing departure time
look_for_missing <- filter(flights,is.na(dep_time))
sapply(look_for_missing,function(x) sum(is.na(x)))
# departure delay, arrival time, arrival delay, and air time are all missing values of every record where departure time is missing. These are probably cancelled flights.
## 5.2.4 4:
NA^0
NA | TRUE
FALSE & NA
NA * 0
# NA^0==1 because all numbers raised to the 0 power equals 1.
# NA | TRUE is TRUE because TRUE is TRUE and TRUE | x is going to be TRUE for any x
# FALSE & NA is FALSE because FALSE and anything will be FALSE
# If the NA matters, then the result will be 'NA'.
# In the NA * 0 example, it returns NA as the result even though you might think that x*0==0 for all x. However, that's not true if x=+/- infinity. In such a case, Inf*0 returns NaN. Thus the NA matters and NA*0 returns NA.
## 5.3.1 1:
# missing values first
arrange(flights, desc(is.na(dep_time)))
## 5.3.1 2:
# Most delayed flights
arrange(flights, desc(dep_delay))
# Smallest delay
arrange(flights, dep_delay)
## 5.3.1 3:
# Fastest Flights
arrange(flights, air_time)
## 5.3.1 4:
# Longest Flights
arrange(flights, desc(air_time))
# Shortest Flights
arrange(flights, air_time)
## 5.4.1 2:
select(flights, carrier, carrier, air_time, dep_delay)
# Duplicating variables doesn't not affect the output of the select function.
## 5.4.1 3:
# one_of() is a function that allows for a list of character strings to be references as a vector, instead of many separate character strings. For example, we can use the select() function with one_of() to return a data frame with column names that are a part of the vector vars.
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
## 5.4.1 4:
select(flights, contains("TIME"))
# This result is a bit surprising in the sense that case does seem to matter to the select() helper function.
# To change the default of ignoring case, you can add the argument ignore.case = FALSE in the contain function after "TIME".
select(flights, contains("TIME", ignore.case = FALSE))
