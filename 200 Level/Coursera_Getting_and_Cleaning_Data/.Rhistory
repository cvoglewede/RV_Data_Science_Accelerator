is.finite(x)
!is.infinite(x)
is.finite(x)==!is.infinite(x)
dplyr::near
.Machine$double.eps^0.5
dplyr::near(3,3.1)
dplyr::near(3,3.0000000000000001)
?integer
?double
.Machine$integer.max
.Machine$double.xmax
typeof(5)
typeof(strtoi(floor(5)))
typeof(as.integer(5))
typeof(type.convert(5,"integer"))
typeof(integer(5))
x <- c(1,2,NA,5, Inf)
mean(is.na(x))
sum(!is.finite(x))
?is.vector
?is.atomic
?setNames
?purrr::set_names
# 1
last_elem <- function (x){
x[length(x)]
}
x <- c(1,2,3,4,5,6)
last_elem(x)
# 2
even_position <- function(x){
x[seq(2,length(x),2)]
}
even_position(x)
# 3
except_last_elem <- function(x){
x[seq(1,length(x)-1,1)]
}
except_last_elem(x)
# 4
even_elem <- function(x){
x[x%%2==0]
}
even_elem(x)
y <- c(2,2,2,5,5,10,12)
even_elem(y)
x <- c(1,0,-1,Inf,-Inf,NA,NaN)
x[-which(x > 0)]
x[x <= 0]
x <- c(1,2,3)
x[4]
x1 <- purrr::set_names(x,"a","b","c")
x1["a"]
x["d"]
x <- tibble::as_tibble(c(1:5))
x1 <- list("A"=c(1:5))
colnames(x) <- "A"
x["A"]
x1["A"]
means <- vector("numeric",ncol(mtcars))
names(means) <- names(mtcars)
for (i in names(mtcars)){
means[i] <- mean(mtcars[[i]])
}
print(means)
library(nycflights13)
types <- vector("list",ncol(flights))
for (i in names(flights)){
types[i] <- class(flights[[i]])
}
print(types)
uniques <- vector("numeric",ncol(iris))
names(uniques) <- names(iris)
for (i in names(iris)){
uniques[i] <- length(unique(iris[[i]]))
}
print(uniques)
mu <- c(-10,0,10,100)
random_list <- vector("list",length(mu))
names(random_list) <- c(-10,0,10,100)
for (i in c(1:4)){
random_list[[i]] <- rnorm(10,mean=mu[i])
}
random_list
out <- ""
for (x in letters) {
out <- stringr::str_c(out, x)
}
out
# Alternative:
stringr::str_c(letters,collapse = "")
x <- sample(100)
sd <- 0
for (i in seq_along(x)) {
sd <- sd + (x[i] - mean(x)) ^ 2
}
sd <- sqrt(sd / (length(x) - 1))
x
sd
# Alternative:
sd(x)
x <- runif(100)
out <- vector("numeric", length(x))
out[1] <- x[1]
for (i in 2:length(x)) {
out[i] <- out[i - 1] + x[i]
}
x
out
# Alternative:
cumsum(x)
hump <- c("five humps","four humps","three humps","two humps","one hump","no humps")
for (i in hump){
cat(stringr::str_c("Alice the camel has ",rep(i,3),".",
collapse="\n"),
"\n")
if (i == "no humps") {
cat("Because Alice is a horse, of course!\n")
}
else {
cat("So ride, Alice, ride. Boom, boom!\n")
}
cat("\n")
}
num_in_bed <- c("ten","nine","eight","seven","six","five","four","three","two","one")
for (i in num_in_bed){
cat(stringr::str_c("There were ",i," in the bed\n"))
cat("and the little one said\n")
if (i=="one"){
cat("'Alone at last!'")
}
else {
cat("'Roll over! Roll over!'\n")
cat("So they all rolled over and one fell out\n")
}
}
# Generalized solution:
How_many_in_bed <- function(x){
for (i in seq(x,1)){
cat(stringr::str_c("There were ",i," in the bed\n"))
cat("and the little one said\n")
if (i==1){
cat("'Alone at last!'")
}
else {
cat("'Roll over! Roll over!'\n")
cat("So they all rolled over and one fell out\n")
}
}}
How_many_in_bed(25)
bottle_text <- function(i){
if (i>2){
bottle_text <- stringr::str_c(i-1," bottles")
}
else if (i==2) {
bottle_text <- "1 bottle"
}
else {
bottle_text <- "No more bottles"
}
bottle_text
}
How_many_bottles <- function(x){
for (i in seq(x,2)){
cat(str_c(bottle_text(i)," of beer on the wall, ",bottle_text(i)," of beer.\n"))
cat(str_c("Take one down and pass it around, ",bottle_text(i-1)," of beer on the wall.\n"))
}
cat("No more bottles of beer on the wall, No more bottles of beer.\n")
cat("We've taken them down and passed them around; now we're drunk and passed out!\n")
}
How_many_bottles(10)
output <- vector("integer", 0)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
How_many_bottles <- function(x){
for (i in seq(x,2)){
cat(str_c(bottle_text(i)," of beer on the wall, ",bottle_text(i)," of beer.\n"))
cat(str_c("Take one down and pass it around, ",bottle_text(i-1)," of beer on the wall.\n"))
}
cat("No more bottles of beer on the wall, No more bottles of beer.\n")
cat("We've taken them down and passed them around; now we're drunk and passed out!\n")
}
How_many_bottles(10)
library(purrr)
How_many_bottles <- function(x){
for (i in seq(x,2)){
cat(str_c(bottle_text(i)," of beer on the wall, ",bottle_text(i)," of beer.\n"))
cat(str_c("Take one down and pass it around, ",bottle_text(i-1)," of beer on the wall.\n"))
}
cat("No more bottles of beer on the wall, No more bottles of beer.\n")
cat("We've taken them down and passed them around; now we're drunk and passed out!\n")
}
How_many_bottles(10)
library(dplyr)
How_many_bottles <- function(x){
for (i in seq(x,2)){
cat(str_c(bottle_text(i)," of beer on the wall, ",bottle_text(i)," of beer.\n"))
cat(str_c("Take one down and pass it around, ",bottle_text(i-1)," of beer on the wall.\n"))
}
cat("No more bottles of beer on the wall, No more bottles of beer.\n")
cat("We've taken them down and passed them around; now we're drunk and passed out!\n")
}
How_many_bottles(10)
library(stringr)
How_many_bottles <- function(x){
for (i in seq(x,2)){
cat(str_c(bottle_text(i)," of beer on the wall, ",bottle_text(i)," of beer.\n"))
cat(str_c("Take one down and pass it around, ",bottle_text(i-1)," of beer on the wall.\n"))
}
cat("No more bottles of beer on the wall, No more bottles of beer.\n")
cat("We've taken them down and passed them around; now we're drunk and passed out!\n")
}
How_many_bottles(10)
output <- vector("integer", 0)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
output
install.packages("microbenchmark")
library(microbenchmark)
undefined_vector <- function(x){
output <- vector("integer",0)
x1=c(1:100)
for (i in seq_along(x1)) {
output <- c(output, sum(x1[[i]]))
}
}
defined_vector <- function(y){
output <- vector("integer",y)
y1=c(1:100)
for (i in seq_along(y1)) {
output <- c(output, sum(y1[[i]]))
}
}
microbenchmark(undefined_vector(10000), times = 300)
microbenchmark(defined_vector(10000), times = 300)
files <- dir("data/", pattern = "\\.csv$", full.names = TRUE)
for (i in 1:length(files)){
df[[i]] <- read.csv(files[[i]])
}
library(dplyr)
df_all <- bind_rows(df)
show_mean <- function(x){
for (i in names(x)){
if (is.numeric(x[[i]])){
cat(str_c(i,": ",format(mean(x[[i]]),digits=3),"\n"))
}
}
}
show_mean(iris)
#1
library(purrr)
map_dbl(mtcars,mean)
output <- vector("integer", 0)
for (i in seq_along(x)) {
output <- c(output, lengths(x[[i]]))
}
library(microbenchmark)
undefined_vector <- function(x){
output <- vector("integer",0)
x1=c(1:100)
for (i in seq_along(x1)) {
output <- c(output, sum(x1[[i]]))
}
}
defined_vector <- function(y){
output <- vector("integer",y)
y1=c(1:100)
for (i in seq_along(y1)) {
output <- c(output, sum(y1[[i]]))
}
}
microbenchmark(undefined_vector(10000), times = 300)
microbenchmark(defined_vector(10000), times = 300)
files <- dir("data/", pattern = "\\.csv$", full.names = TRUE)
for (i in 1:length(files)){
df[[i]] <- read.csv(files[[i]])
}
library(dplyr)
df_all <- bind_rows(df)
show_mean <- function(x){
for (i in names(x)){
if (is.numeric(x[[i]])){
cat(str_c(i,": ",format(mean(x[[i]]),digits=3),"\n"))
}
}
}
show_mean(iris)
#1
library(purrr)
map_dbl(mtcars,mean)
#2
map_chr(flights,typeof)
#3
map_int(iris, ~length(unique(.)))
#4
mu <- c(-10, 0, 10, 100)
map(mu, ~ rnorm(n = 10, mean = .))
installed.packages("swirl")
library(swirl)
library("swirl")
installed.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
getwd()
setwd("/Users/cvoglewede/projects")
getwd()
dir.create("Coursera_Getting_and_Cleaning_Data")
getwd()
setwd("Coursera_Getting_and_Cleaning_Data")
getwd()
install.packages("dplyr")
install.packages("ggplot2")
install.packages("readr")
install.packages("data.table")
install.packages("readxl")
install.packages("XLConnect")
install.packages("RMySQL")
install.packages("jsonlite")
install.packages("tidyr")
install.packages("lubridate")
install.packages("stringr")
install.packages("stringr")
install.packages("MASS")
install.packages("ISLR")
install.packages("car")
install.packages("RColorBrewer")
install.packages("XML")
install.packages("statsr")
install.packages(c("foreign", "lattice", "lme4", "Matrix", "mgcv", "ps", "Rcpp", "survival"))
library(data.table)
library(readxl)
library(readr)
library(tidyr)
library(XML)
library(XLConnect)
swirl()
swirl()
library(swirl)
swirl()
swirl()
read_csv(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
df1 <- read.table(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
df1 <- read_csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
head(df1)
length(which(df1$VAL==24))
head(df1[,"FES"])
head(df1[,"FES"],100)
df2 <- read_excel("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
df2 <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
df2 <- read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
dat <- read.table("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
rm(df2)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(dat$Zip*dat$Ext,na.rm=T)
head(dat)
dat <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx")
?read_xlsx
dat <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = G18:O23)
dat <- read_excel("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = G18:O23)
dat <- read_excel("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
dat <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
dat <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",sheet="NGAP Sample Data",range = "G18:O23")
dat <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
dat <- read_table("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
dat <- read_excel("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
dat <- read_xls("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
dat <- read_xlsx("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",range = "G18:O23")
install.packages(xlsx)
library(xlsx)
install.packages("xlsx")
library("xlsx")
library(xlsx)
library("xlsx")
library(xlsx)
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("rJava")
library(xlsx)
library("xlsxjars", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(rJava)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library(rJava)
?rJava
library(rjava)
library(rJava)
dat <- read_excel("Book1.xlsx",range = "G18:O23")
dat <- read_excel("Users/cvoglewede/Downloads/Book1.xlsx")
dat <- read.table("Users/cvoglewede/Downloads/Book1.xlsx")
dat <- read.table("/Users/cvoglewede/Downloads/Book1.xlsx")
dat <- read_excel("/Users/cvoglewede/Downloads/Book1.xlsx")
dat
sum(dat$Zip*dat$Ext,na.rm=T)
df2 <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
files <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- htmlTreeParse(files,useInternal=TRUE)
doc
doc <- htmlTreeParse(files,useInternalNodes = =TRUE)
doc <- htmlTreeParse(files,useInternalNodes = TRUE)
rootNode=xmlRoot(doc)
rootNode
names(rootNode)
library(XML)
doc <- htmlTreeParse(files)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- htmlTreeParse(file,useInternalNodes = TRUE)
rootNode=xmlRoot(doc)
xmlName(rootNode)
doc <- xmlTreeParse(file,useInternalNodes = TRUE)
rootNode=xmlRoot(doc)
xmlName(rootNode)
doc <- xmlTreeParse(file)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
doc <- xmlTreeParse(file)
doc <- xmlParse(file)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
doc <- xmlTree(file)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
doc <- xmlTreeParse(file)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
doc <- xmlTreeParse(file)
rootNode <- xmlRoot(doc)
doc <- xmlTreeParse(file)
rm(doc)
doc <- xmlTreeParse(file)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rm(files)
xmlName(rootNode)
rootNode <- xmlRoot(doc)
doc <- xmlTreeParse(file)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file)
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(file)
rootNode <- xmlRoot(doc)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL)
fileURL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
rootNode[1]
rootNode[[1]
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"/zipcode",xmlValue)
warnings()
doc <- htmlTreeParse(fileURL)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
doc <- xmlTreeParse(fileURL)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
xpathSApply(doc,"/zipcode",xmlValue)
xpathSApply(doc,"//zipcode",xmlValue)
xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
zipcodes <- xpathSApply(doc,"//li[@class='zipcode']",xmlValue)
zipcodes <- xpathSApply(doc,"//[@class='zipcode']",xmlValue)
xmlSApply(rootNode,xmlValue)
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
head(DT)
mean(DT$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
?data.table
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT$pwgtp15)
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
library(microbenchmark)
microbenchmark(tapply(DT$pwgtp15,DT$SEX,mean),DT[,mean(pwgtp15),by=SEX])
microbenchmark(tapply(DT$pwgtp15,DT$SEX,mean),DT[,mean(pwgtp15),by=SEX],mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
microbenchmark(tapply(DT$pwgtp15,DT$SEX,mean),DT[,mean(pwgtp15),by=SEX])
tapply(DT$pwgtp15,DT$SEX,mean)
DT[,mean(pwgtp15),by=SEX]
microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
,DT[,mean(pwgtp15),by=SEX])
microbenchmark(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15),DT[,mean(pwgtp15),by=SEX])
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
